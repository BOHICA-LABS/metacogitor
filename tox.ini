# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
# To use a PEP 517 build-backend you are required to configure tox to use an isolated_build:
# https://tox.readthedocs.io/en/latest/example/package.html
isolated_build = True

# These environments are run in order if you just use `tox`:
envlist =
    # always keep coverage-clean first
    # coverage-clean
    # code linters/stylers
    lint
    manifest
    pyroma
    mypy
    # documentation linters/checkers
    doc8
    docstr-coverage
    docs-test
    # the actual tests
    py
    # always keep coverage-report last
    # coverage-report

[testenv]
# To use a PEP 517 build-backend you are required to configure tox to use an isolated_build:
# https://tox.readthedocs.io/en/latest/example/package.html
isolated_build = True

# Runs on the "tests" directory by default, or passes the positional
# arguments from `tox -e py <posargs_1> ... <posargs_n>
commands =
    coverage run -p -m pytest --durations=20 {posargs:tests}
    coverage combine
    coverage xml
extras =
    # See the [options.extras_require] entry in setup.cfg for "tests"
    dev

allowlist_externals =
    coverage

[testenv:doctests]
commands =
    xdoctest -m src
deps =
    xdoctest
    pygments

[testenv:coverage-clean]
deps = coverage
skip_install = true
commands = coverage erase

allowlist_externals =
    coverage

[testenv:lint]
skip_install = true
allowlist_externals =
    pre-commit
commands = pre-commit run --all-files
description = Run linters.

[testenv:lint-fix]
skip_install = true
allowlist_externals =
    pre-commit
commands = pre-commit run --all-files --show-diff-on-failure --verbose --color always --hook-stage manual

[testenv:mega-linter]
skip_install = true
allowlist_externals =
    mega-linter-runner
commands = mega-linter-runner

[testenv:doclint]
deps =
    rstfmt
skip_install = true
commands =
    rstfmt docs/source/
description = Run documentation linters.

[testenv:manifest]
deps = check-manifest
skip_install = true
commands = check-manifest
description = Check that the MANIFEST.in is written properly and give feedback on how to fix it.

[testenv:ruff]
deps = ruff
skip_install = true
commands = ruff check .
description = Run the ruff tool to lint the project.

[testenv:ruff-fix]
deps = ruff
skip_install = true
commands = ruff check --fix .
description = Run the ruff tool to lint the project.

[testenv:flake8]
skip_install = true
deps =
    darglint
    flake8
    flake8-black
    flake8-bandit
    flake8-bugbear
    flake8-colors
    flake8-docstrings
    flake8-isort
    flake8-print
    pep8-naming
    pydocstyle
commands =
    flake8 src/ tests/
description = Run the flake8 tool with several plugins (bandit, docstrings, import order, pep8 naming). See https://cthoyt.com/2020/04/25/how-to-code-with-me-flake8.html for more information.

[testenv:pyroma]
deps =
    pygments
    pyroma
skip_install = true
commands = pyroma --min=10 .
description = Run the pyroma tool to check the package friendliness of the project.

[testenv:mypy]
deps = mypy
skip_install = true
commands = mypy --install-types --non-interactive --ignore-missing-imports src/
description = Run the mypy tool to check static typing on the project.

[testenv:doc8]
skip_install = true
deps =
    sphinx
    doc8
commands =
    doc8 docs/source/
description = Run the doc8 tool to check the style of the RST files in the project docs.

[testenv:docstr-coverage]
skip_install = true
deps =
    docstr-coverage
commands =
    docstr-coverage src/ tests/ --skip-private --skip-magic
description = Run the docstr-coverage tool to check documentation coverage

[testenv:docs]
description = Build the documentation locally.
extras =
    # See the [options.extras_require] entry in setup.cfg for "docs"
    docs
    # You might need to add additional extras if your documentation covers it
commands =
    pip install -e .
    python -m sphinx -W -b html -d docs/build/doctrees docs/source docs/build/html -a -E

[testenv:docs-test]
description = Test building the documentation in an isolated environment.
passenv =
    TELEGRAM_BOT_TOKEN
    TELEGRAM_BOT_CHAT_ID
changedir = docs
extras =
    {[testenv:docs]extras}
commands =
    mkdir -p {envtmpdir}
    cp -r source {envtmpdir}/source
    cp -r ../.github {envtmpdir}/../.github
    cp -r ../tox.ini {envtmpdir}/../tox.ini
    python -m sphinx -W -b html     -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/html
    python -m sphinx -W -b coverage -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/coverage
    cat {envtmpdir}/build/coverage/c.txt
    cat {envtmpdir}/build/coverage/python.txt
allowlist_externals =
    cp
    cat
    mkdir

[testenv:coverage-report]
deps = coverage
skip_install = true
commands =
    coverage combine
    coverage report

####################
# Deployment tools #
####################

[testenv:bumpversion]
commands = bumpversion {posargs}
skip_install = true
passenv = HOME
deps =
    bumpversion

[testenv:build]
skip_install = true
deps =
    wheel
    build
commands =
    python -m build --sdist --wheel --no-isolation

[testenv:release]
description = Release the code to the test PyPI site
skip_install = true
deps =
    {[testenv:build]deps}
    twine >= 3.0.0
commands =
    {[testenv:build]commands}
    twine upload --config-file .pypirc --skip-existing -r cloudsmith dist/*

[testenv:make-release-version]
description = Bump the version and make a release commit (remove dev tag)
skip_install = true
deps =
    bump2version

commands =
    bump2version release --tag --sign-tags


[testenv:bump-next-dev-version]
description = Bump the version for the next development cycle
skip_install = true
deps =
    bump2version

commands =
    bump2version patch



[testenv:finish]
skip_install = true
passenv =
    HOME
    TWINE_USERNAME
    TWINE_PASSWORD
deps =
    {[testenv:release]deps}
    {[testenv:make-release-version]deps}
    {[testenv:bump-next-dev-version]deps}

commands =
    {[testenv:make-release-version]commands}
    {[testenv:release]commands}
    #git push --tags
    {[testenv:bump-next-dev-version]commands}
    #git push
allowlist_externals =
    git
