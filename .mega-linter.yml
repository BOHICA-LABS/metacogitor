---
# Configuration file for MegaLinter
# See all available variables at https://megalinter.io/configuration/ and in linters documentation

APPLY_FIXES: all # all, none, or list of linter keys
# ENABLE: # If you use ENABLE variable, all other languages/formats/tooling-formats will be disabled by default
# ENABLE_LINTERS: # If you use ENABLE_LINTERS variable, all other linters will be disabled by default
# DISABLE:
#  - COPYPASTE # Uncomment to disable checks of excessive copy-pastes
#  - REPOSITORY_TRIVY # Uncomment to disable checks of vulnerabilities in Docker images
#  - SPELL # Uncomment to disable checks of spelling mistakes
SHOW_ELAPSED_TIME: true
# FILEIO_REPORTER: true # Uncomment to upload artifacts to FileIO
# DISABLE_ERRORS: true # Uncomment if you want MegaLinter to detect errors but not block CI to pass
SPELL_CSPELL_DISABLE_ERRORS: true # Uncomment if you want MegaLinter to detect spelling mistakes but not block CI to pass
REPOSITORY_DEVSKIM_ARGUMENTS: "--skip-git-ignored-files" # Uncomment to skip git ignored files

# TODO: this is temporary, devskim is not obeying the skip-git-ignored-files argument
REPOSITORY_DEVSKIM_DISABLE_ERRORS: true # Uncomment if you want MegaLinter to detect vulnerabilities in code but not block CI to pass

# TODO: this is temporary, we should fix the issues in the code, Failing on github actions
REPOSITORY_CHECKOV_DISABLE_ERRORS: true # Uncomment if you want MegaLinter to detect vulnerabilities in code but not block CI to pass

# FILTER_REGEX_INCLUDE: (src/) # Uncomment to only lint files in src/ folder

# This will always fail because of unknown directives in the rst files, resolve what we can and ignore the rest
RST_RSTFMT_DISABLE_ERRORS: true # Uncomment if you want MegaLinter to detect RST formatting issues but not block CI to pass

# This will always fail because of unknown directives in the rst files, resolve what we can and ignore the rest
RST_RSTCHECK_DISABLE_ERRORS: true # Uncomment if you want MegaLinter to detect RST formatting issues but not block CI to pass

# This will always fail because of unknown directives in the rst files, resolve what we can and ignore the rest
RST_RST_LINT_DISABLE_ERRORS: true # Uncomment if you want MegaLinter to detect RST formatting issues but not block CI to pass

# TODO: this is temporary, we should fix the issues in the code
COPYPASTE_JSCPD_DISABLE_ERRORS: true # Uncomment if you want MegaLinter to detect excessive copy-pastes but not block CI to pass

# TODO: investigate why this is not working, I think an RST linter is prettifing the file and then the editorconfig check fails
EDITORCONFIG_FILTER_REGEX_EXCLUDE: (docs\/.*\.rst) # Uncomment to exclude all rst files in docs/ folder for EditorConfig checks

# TODO: inside each script, remediate or disable the bandit check in the code. As these are only used to help dev Its not a security issue as the scripts are not exposed in the package
PYTHON_BANDIT_FILTER_REGEX_EXCLUDE: (scripts\/.*\.py) # Uncomment to exclude all py files in scripts/ folder for Bandit checks
PYTHON_MYPY_FILTER_REGEX_EXCLUDE: (docs\/.*\.py|\/config\/environments\/original.py) # Uncomment to exclude all py files in docs/ folder for Mypy checks

# docs/ is excluded because it contains a lot of autogenerated files, original.py is excluded because it is a copy of the original file and will be removed
# plugins.py is excluded because it generates to many false positives because of the hacked way we use it
PYTHON_PYRIGHT_FILTER_REGEX_EXCLUDE: (docs\/.*\.py|\/config\/environments\/original.py|base\/plugins.py) # Uncomment to exclude all py files in docs/ folder for Pyright checks

PRE_COMMANDS:
  - command: apk add --update --no-cache postgresql libpq-dev
  - command: cd /tmp/lint && pip install -e .[dev] # Install the project in editable mode with dev dependencies
  #- command: pip install -r /tmp/lint/requirements/base.txt -r /tmp/lint/requirements/dev.txt # Install the project in editable mode with dev dependencies
